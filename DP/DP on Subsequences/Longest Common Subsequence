"""
Problem Statement: 

Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Example 1:
Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

"""


class Solution:
    
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        lenS1 = len(text1)
        lenS2 = len(text2)
        dp = []
        
        for l in range(lenS1 + 1):
            dp.append([0] * (lenS2 + 1))

        for i in range(lenS1 +1):
            dp[i][0] = 0
        for j in range(lenS2 +1):
            dp[0][j] = 0

        for ind1 in range(1, lenS1 + 1):
            for ind2 in range(1, lenS2 + 1):
                if text1[ind1-1] == text2[ind2-1]:
                    dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1]
                else:
                    dp[ind1][ind2] = 0 + max(dp[ind1-1][ind2], dp[ind1][ind2-1])
        return dp[lenS1 ][lenS2 ]