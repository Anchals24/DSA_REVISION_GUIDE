"""
Problem statement
You are given 2 non-empty strings 's1' and 's2' consisting of lowercase English alphabets only.

In one operation you can do either of the following on 's1':

(1) Remove a character from any position in 's1'.
(2) Add a character to any position in 's1'.

Find the minimum number of operations required to convert string 's1' into 's2'.

Example:
Input: 's1' = "abcd", 's2' = "anc"
Output: 3

Explanation:
Here, 's1' = "abcd", 's2' = "anc".
In one operation remove 's1[3]', after this operation 's1' becomes "abc".    
In the second operation remove 's1[1]', after this operation 's1' becomes "ac".
In the third operation add 'n' in 's1[1]', after this operation 's1' becomes "anc".

Hence, the minimum operations required will be 3. It can be shown that there's no way to convert s1 into s2 in less than 3 moves.

"""

def lcs(s1, s2, n , m):
    #dp initialize
    dp = []
    for i in range(n+1):
        dp.append([-1] * (m+1))
    #base cases
    for ind1 in range(n+1):
        dp[ind1][0] = 0
    for ind2 in range(m+1):
        dp[0][ind2] = 0
    #conditions
    for ind1 in range(1, n+1):
        for ind2 in range(1, m+1):
            if s1[ind1-1] == s2[ind2-1]:
                dp[ind1][ind2] = 1+ dp[ind1-1][ind2 - 1]
            else:
                dp[ind1][ind2] = max(dp[ind1-1][ind2], dp[ind1][ind2-1])
    return dp[n][m]


def canYouMake(s1: str, s2: str) -> int:
    # write your code here
    n , m = len(s1) , len(s2)
    total = n + m
    lcss = lcs(s1, s2, n, m) * 2
    return total - lcss